#!/bin/bash

# Stop on errors
set -Eeuo pipefail
# Prints commands
set -x

# Sanity check command line options
usage() {
echo "Usage: $0 (start|stop|restart|status)"
}

if [ $# -ne 1 ]; then
usage
exit 1
fi


# Parse command line options
case $1 in
"start")
  echo "starting mapreduce ..."

  # Exit if a master or worker is already running. 
  if [[ $(pgrep -lf mapreduce-master) ]]; then
    echo "Error: mapreduce-master is already running"
    exit 1
  elif [[ $(pgrep -lf mapreduce-worker) ]]; then
    echo "Error: mapreduce-worker is alread running"
    exit 1
  else
    mapreduce-master 6000 &
    sleep 2
    mapreduce-worker 6000 6001 &
    mapreduce-worker 6000 6002 &
  fi
  ;;

"stop")
  # Detect GNU vs BSD netcat.  We need netcat to close the connection after
  # sending a message, which requires different options.
  echo "stopping mapreduce ..."

  set +o pipefail  # Avoid erroneous failures due to grep returning non-zero
  if nc -h 2>&1 | grep -q "\-c"; then
    NC="nc -c"
  elif nc -h 2>&1 | grep -q "\-N"; then
    NC="nc -N"
  elif nc -h 2>&1 | grep -q "\-C"; then
    NC="nc -C"
  else
    echo "Error detecting netcat version."
    exit 1
  fi
  set -o pipefail

  echo '{"message_type": "shutdown"}' | $NC localhost 6000 || true
  sleep 2  # give the master time to receive signal and send to workers

  echo "killing mapreduce master ..."
  pkill -f mapreduce-master || true
  echo "killing mapreduce worker ..."
  pkill -f mapreduce-worker || true
  ;;

"status")
  if [[ $(pgrep -lf mapreduce-master) ]]; then
    echo "master running"
  else
    echo "master not running"
  fi

  if [[ $(pgrep -lf mapreduce-worker) ]]; then
    echo "workers running"
  else
    echo "workers not running"
  fi
  ;;

"restart")
  ./bin/mapreduce stop
  ./bin/mapreduce start
  ;;

*)

  usage
  exit 1
  ;;
esac